#!/bin/bash
################################################################
# ESP32 Release builder
# ====================
# (C) @hpsaturn 2022 - 2025
# 
# This tool needs a PlatformIO project builded. It will make an
# installer of your current builds in the current directory.
#
# --------------------------------------------------------------
# Based in the original deploy tool from CanAirIO firmware, but
# here it is a general tool for any project.
################################################################

DFLNAME=`basename "$PWD"`
DATE=`date +%Y%m%d`
FIRMDIR=.pio/build
RELDIR="releases"

# CONFIGURATION
# This tool admit the next environment variables for override defaults:
#
# FIRMVER (firmware version, i.e 0.2.0. Defautl from pio ini)
# FIRMREV (firmware version, i.e 920. Defautl from pio ini)
#
# FIRNAME (firmare name, default basename directory)
# FLAVORS (valid pio env values for building)
# MCUTYPE (valid ESP32 mcu type: ESP32, ESP32C3, ESP32S2, ESP32S3)
# SPIFADR (spiffs partition address. Default 0xc90000)
#
# Usage:
# Only export this variables or execute this script like this examples:
#
# FIRMVER=0.3.2 FIRMREV=999 deploy build
# FIRMVER=0.3.2 FIRMREV=999 FLAVORS="ICENAV_BOARD TDECK_ESP32S3" deploy all
# MCUTYPE=ESP32S2 build all

TARGET=`cat platformio.ini | grep 'target =' | awk '{print $3}'`
PIO_INI_REV=`cat platformio.ini | grep 'revision =' | awk '{print $3}'`
PIO_INI_VER=`cat platformio.ini | grep 'version =' | awk '{print $3}'`
LIB_NAME=`cat library.properties | grep name | sed -n -e 's/^.*name=//p'`
LIB_VER=`cat library.properties | grep version | sed -n -e 's/^.*version=//p'`

SRC_VER=${FIRMVER:-$PIO_INI_VER} SRC_VER=${SRC_VER:-$LIB_VER} SRC_VER=${SRC_VER:-$DATE}
SRC_REV=${FIRMREV:-$PIO_INI_REV} SRC_REV=${SRC_REV:-$DATE}
VERSION="v${SRC_VER}rev${SRC_REV}"

NAME="${FIRMNAME:-$LIB_NAME}" NAME=${NAME:-$DFLNAME}
env_names=${FLAVORS:-$dfl_envs}

dfl_mcu="ESP32S3"
esp32mcu=${MCUTYPE:-$dfl_mcu}
spiffs_addr="0xc90000"
spiffs_addr=${SPIFADR:-$spiffs_addr}

spiffs_cmd=""

check_esptool () {
  esptool_path=`${PIO_HOME}/packages/tool-esptoolpy/esptool.py`
  if [ "$esptool_path" = "" ]; then
	  echo "Please install esptool first"
    exit 1
  fi
}

check_firmdir () {
  if [ ! -d "$FIRMDIR" ]; then
	  echo "The $FIRMDIR directory does not exist. Please build your project first :D"
    exit 1
  fi 
}

check_binaries () {
  for d in */ ; do
    if [ ! -e $d/firmware.bin ]; then
      echo "Missing firmware file on $d"
      exit 1
    fi
  done
}

check_flavors () {
  if [ "$env_names" = "" ]; then
    env_output=`pio run -e invalid_env_name 2>&1`
    # Extract environment names from error message using grep and sed
    if echo "$env_output" | grep -q "Valid names are"; then
        env_names=$(echo "$env_output" | grep -o "Valid names are '[^']*'" | sed "s/Valid names are '//; s/'//")
        env_names=$(echo "$env_names" | tr ',' ' ')
    else
        echo "Error: Could not retrieve pio environment names"
        echo "PlatformIO output: $env_output"
        exit 1
    fi
  fi
}

exit_on_error () {
  echo ""
  echo "***********************************************"
  echo -e "\033[31m ** BUILD FAILED: $1 \033[0m"
  echo "***********************************************"
  echo ""
  exit 1
}

build_spiffs_bin () {
  if [[ -e "data" ]]; then
    pio run -s -e $1 -t buildfs || exit_on_error $1
  fi
}

build () {
  echo "***********************************************"
  echo "** Building $1 ($esp32mcu)"
  echo "***********************************************"
  echo ""
  pio run -s -e $1 || exit_on_error $1
  build_spiffs_bin $1
  echo -e "\033[32m PASSED $1 !\033[0m"
  echo ""
}

build_all () {
  check_flavors
  for env in $env_names; do
    build $env
  done
}

showHelp () {
  echo ""
  echo "*******************************"
  echo "** Build release tool        **"
  echo "*******************************"
  echo ""
  echo "usage:"
  echo ""
  echo "deploy [all|build|installer|lib|clean|publish|help]"
  echo ""
  echo "examples:"
  echo ""
  echo "deploy all"
  echo "deploy build"
  echo "deploy installer"
  echo "FIRMVER=0.3.2 FIRMREV=999 deploy build"
  echo "FIRMVER=0.3.2 FIRMREV=999 FLAVORS="ICENAV_BOARD TDECK_ESP32S3" deploy all"
  echo "MCUTYPE=ESP32S2 deploy all"
  echo ""
}

clean () {
  check_flavors
  for env in $env_names ; do
    rm -f "${RELDIR}/${env}_${VERSION}_merged.bin"
    pio run -e $env --target clean
  done
  rm -f ${RELDIR}/${NAME}_${VERSION}.zip
}

installer () {
  mkdir -p ${RELDIR}
  check_esptool
  check_firmdir
  cd $FIRMDIR
  check_binaries
  for dir in $env_names ; do
    FLAVOR=`basename $dir`
    OUTPUT="${FLAVOR}_${VERSION}_merged.bin"
    echo ""
    echo "Generating merge binary for $OUTPUT"
    if [[ -f "$dir/spiffs.bin" ]]; then
      spiffs_cmd="$spiffs_addr $dir/spiffs.bin"
      echo "spiffs: $spiffs_cmd"
    fi
    if [ $esp32mcu == ESP32 ]; then
      find $PIO_HOME -wholename "*esp32/*bootloader_dio_40m.bin" -exec cp {} $dir/ ";"
      find $PIO_HOME -wholename "*espressif32/*boot_app0.bin" -exec cp {} $dir/ ";"
      /usr/bin/python3 ${PIO_HOME}/packages/tool-esptoolpy/esptool.py --chip esp32 merge_bin -o $FLAVOR/$OUTPUT --flash_mode dio --flash_freq 40m --flash_size 4MB 0x1000 $dir/bootloader_dio_40m.bin 0x8000 $dir/partitions.bin 0xe000 $dir/boot_app0.bin $spiffs_cmd 0x10000 $dir/firmware.bin
    elif [ $esp32mcu == ESP32C3 ]; then
      /usr/bin/python3 ${PIO_HOME}/packages/tool-esptoolpy/esptool.py --chip esp32c3 merge_bin -o  $FLAVOR/$OUTPUT --flash_mode dio --flash_freq 80m --flash_size=keep 0x0000 $dir/bootloader.bin 0x8000 $dir/partitions.bin 0xe000 ${PIO_HOME}/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin $spiffs_cmd 0x10000 $dir/firmware.bin
    elif [ $esp32mcu == ESP32S3 ]; then
      /usr/bin/python3 ${PIO_HOME}/packages/tool-esptoolpy/esptool.py --chip esp32s3 merge_bin -o  $FLAVOR/$OUTPUT --flash_mode dio --flash_freq 80m --flash_size=keep 0x0000 $dir/bootloader.bin 0x8000 $dir/partitions.bin 0xe000 ${PIO_HOME}/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin $spiffs_cmd 0x10000 $dir/firmware.bin
    elif [ $esp32mcu == ESP32S2 ]; then
      /usr/bin/python3 ${PIO_HOME}/packages/tool-esptoolpy/esptool.py --chip esp32s2 merge_bin -o  $FLAVOR/$OUTPUT --flash_mode dio --flash_freq 80m --flash_size=keep 0x0000 $dir/bootloader.bin 0x8000 $dir/partitions.bin 0xe000 ${PIO_HOME}/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin $spiffs_cmd 0x10000 $dir/firmware.bin
    fi
    md5sum $FLAVOR/${OUTPUT}
    cp $FLAVOR/${OUTPUT} ../../${RELDIR}/
  done
  cd ../../${RELDIR}
  echo ""
  echo "packing release:"
  zip ${NAME}_${VERSION}.zip *${VERSION}_merged.bin
  echo ""
  du -hs ${NAME}_${VERSION}.zip
  echo ""
}

build_lib () { 
  echo ""
  echo "***********************************************"
  echo "** Building Library Package ${NAME}_${SRC_VER}"
  echo "***********************************************"
  echo ""
  pio package pack -o $RELDIR/
  echo ""
  OUTPUT="${RELDIR}/${NAME}-${SRC_VER}.tar.gz"
  tar ztf $OUTPUT
  echo ""
  echo "***********************************************"
  echo "************** Build done *********************" 
  echo "***********************************************"
  echo ""
  md5sum $OUTPUT
  du -hs $OUTPUT
  echo ""
}

publish_release () {
  if [[ -f "${RELDIR}/${NAME}_${VERSION}.zip" ]]; then
    OUTPUT=${NAME}_${VERSION}.zip
  elif [[ -f "${RELDIR}/${NAME}-${SRC_VER}.tar.gz" ]]; then
    OUTPUT=${NAME}-${SRC_VER}.tar.gz
  else
    echo ""
    echo "Package not found! Please build it first (deploy build or deploy lib)"
    echo ""
    exit 1
  fi
  echo "Publishing release: v${FIRMVER}" 
  echo "uploading: ${OUTPUT}"
  git tag -a "v${FIRMVER}" -m "release v${FIRMVER} rev${FIRMREV}"
  git push origin "v${FIRMVER}"
  git log -n 15 --pretty=format:"%h %s" | gh release create "v${FIRMVER}" -F - -t "v${FIRMVER}" -p ${RELDIR}/${OUTPUT}
}

if [ "$1" = "" ]; then
  showHelp
else
  case "$1" in
    clean)
      clean
      ;;

    all)
      build_all
      installer
      ;;

    -help)
      showHelp
      ;;

    help)
      showHelp
      ;;

    build)
      if [ "$2" = "" ]; then
        build_all
      else
        build "$2"
      fi
      ;;
    
    lib)
      build_lib
      ;;

    installer)
      check_flavors
      installer
      ;;

    publish)
      publish_release "$2"
      ;;

    *)
      showHelp
      ;;
  esac
fi

exit 0
