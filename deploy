#!/bin/bash
################################################################
# ESP32 Release builder
# ====================
# (C) @hpsaturn 2022
# 
# This tool needs a PlatformIO project builded. It will make an
# installer of your current builds in the current directory.
#
# --------------------------------------------------------------
# Based in the original deploy tool from CanAirIO firmware, but
# here it is a general tool for any project.
################################################################

DFLNAME=`basename "$PWD"`
DATE=`date +%Y%m%d`
FIRMDIR=.pio/build
RELDIR="releases"

# CONFIGURATION

TARGET=`cat platformio.ini | grep 'target =' | awk '{print $3}'`
PIO_INI_REV=`cat platformio.ini | grep 'revision =' | awk '{print $3}'`
PIO_INI_VER=`cat platformio.ini | grep 'version =' | awk '{print $3}'`
SRC_VER=${FIRMVER:-$PIO_INI_VER} SRC_VER=${SRC_VER:-$DATE}
SRC_REV=${FIRMREV:-$PIO_INI_REV} SRC_REV=${SRC_REV:-$DATE}
NAME="${FIRMNAME:-$DFLNAME}"
PIO_ESP32_BIN=$PIO_HOME/tools/sdk/esp32/bin
PIO_PARTITIONS=$PIO_HOME/tools/partitions

check_esptool () {
  esptool_path=`command -v esptool`
  if [ "$esptool_path" = "" ]; then
	  echo "Please install esptool first"
    exit 1
  fi
}

check_firmdir () {
  if [ ! -d "$FIRMDIR" ]; then
	  echo "The $FIRMDIR directory does not exist. Please build your project first :D"
    exit 1
  fi 
}

check_binaries () {
  for d in */ ; do
    if [ ! -e $d/firmware.bin ]; then
      echo "Missing firmware file on $d"
      exit 1
    fi
  done
}

check_version () {
  if [ "$1" != "" ]; then
    VERSION="$1"
  fi
}

showHelp () {
  echo ""
  echo "*******************************"
  echo "** Build release tool        **"
  echo "*******************************"
  echo ""
  echo "usage:"
  echo ""
  echo "deploy [build|clean|publish|help]"
  echo ""
  echo "examples:"
  echo "deploy build"
  echo "deploy build 0.1.2"
}

clean () {
  rm -f ${NAME}_v${VERSION}.zip
  rm -rf .pio/release
}

build () {
  clean
  check_esptool
  check_firmdir
  check_version "$1"
  echo "Version detected: $VERSION"
  cd $FIRMDIR
  check_binaries
  mkdir -p ../release
  for dir in */ ; do
    FLAVOR=`basename $dir`
    OUTPUT="${NAME}_${FLAVOR}_${VERSION}.bin"
    echo "Generating merge binary for $OUTPUT"
    esptool --chip esp32 merge_bin -o ../release/${OUTPUT}  --flash_mode dio --flash_freq 40m --flash_size 4MB 0x1000 $PIO_ESP32_BIN/bootloader_dio_40m.bin 0x8000 $FLAVOR/partitions.bin 0xe000 $PIO_PARTITIONS/boot_app0.bin 0x10000 $FLAVOR/firmware.bin
    md5sum ../release/${OUTPUT}
  done
  cd ../release
  zip ../../${NAME}_v${VERSION}.zip *.bin
  cd ../../
  md5sum ${NAME}_v${VERSION}.zip
}

publish_release () {
  check_version "$1"
  echo "Publishing release: v${VERSION}" 
  echo "uploading: ${NAME}_v${VERSION}.zip"
  git tag -a "${VERSION}" -m "release v${VERSION}"
  git push origin "${VERSION}"
  git log -n 10 --pretty=format:"%h %s" | gh release create "${VERSION}" -F - -t "v${VERSION}" -p ${NAME}_v${VERSION}.zip
}

if [ "$1" = "" ]; then
  echo "Deploy tool ($NAME $SRC_VER $SRC_REV)"
  echo ""
  showHelp
else
  case "$1" in
    clean)
      clean
      ;;

    -help)
      showHelp
      ;;

    help)
      showHelp
      ;;

    build)
      build "$2"
      ;;

    publish)
      publish_release "$2"
      ;;

    *)
      showHelp
      ;;
  esac
fi

exit 0

